<?php

namespace App\Models;

use AllowDynamicProperties;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Carbon;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Str;

#[AllowDynamicProperties] class Event extends Model
{
    public mixed $eventData;
    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
    }

    use HasFactory;
    protected $fillable = [
        'event_type_id',
        'type',
        'data',
        'event_category',
    ];
    protected $table = 'events';

    protected $casts = [
        'data' => 'array',
        'data.is_inseminated' => 'boolean',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::creating(function ($model) {
            $model->creator_id = auth()->id();
        });
    }

    public function data(): Attribute
    {
        return Attribute::make(
            get: fn ($value) => $value ? collect(json_decode($value, true)) : null,
            set: fn ($value) => $value ? json_encode($value) : null,
        );
    }

    public function creator(): BelongsTo
    {
        return $this->belongsTo(User::class, 'creator_id', 'id');
    }

    public function eventType(): BelongsTo
    {
        return $this->belongsTo(EventType::class, 'event_type_id', 'id');
    }

    public function startAt():Attribute
    {
        return Attribute::make(
            get: fn ($value) => Carbon::make($this->data->get('start_at'))?->format('Y-m-d H:i:s') ?? null,
        );
    }
    public function endAt():Attribute
    {
        return Attribute::make(
            get: fn ($value) => Carbon::make($this->data->get('end_at'))?->format('Y-m-d H:i:s') ?? null,
        );
    }


}
